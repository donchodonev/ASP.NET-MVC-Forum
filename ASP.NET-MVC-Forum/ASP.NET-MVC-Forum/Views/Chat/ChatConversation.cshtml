@model ASP.NET_MVC_Forum.Models.Chat.ChatConversationViewModel;

@{
    this.ViewBag.Title = "Chat";
}

<div class="container">
    <div id="messagesList" style="font-size: 28px;">
    </div>
    <div class="mb-5 mt-5"></div>
    <div id="message-holder" class="container row justify-content-center" style="width:100%; bottom: 10%;">
        <input class="col-10 mt-3" type="text" id="messageInput" placeholder="Message..." />
        <button id="sendButton" class="ml-2 col-1 btn btn-dark mt-3">Send</button>
    </div>
</div>

@section Scripts {
    <script>
        var connection =
            new signalR.HubConnectionBuilder()
                .withUrl("/mychat")
                .build();

        connection.on("ReceiveHistory",
            function (messages) {
                for (var i = 0; i < messages.length ; i++) {
                    var chatInfo = `<div>${messages[i].text}</div>`;
                    $("#messagesList").append(chatInfo);
                    autoscroll();
                };
            }
        );

        connection.on("ReceiveMessage",
            function (message) {
                var chatInfo = `<div>[${message.time}] [${message.senderUsername}]: ${message.text}</div>`;
                $("#messagesList").append(chatInfo);
                autoscroll();
            });



        $("#sendButton").click(function () {
            var message = $("#messageInput").val();
            console.log(message);

            connection.invoke(
                "SendMessageToGroup",
                "@Model.SenderIdentityUserId",
                "@Model.ReceiverIdentityUserId",
                `${message}`,
                @Model.ChatId,
                "@Model.SenderUsername");


            $("#messageInput").val("");
        });


        connection.start().catch(function (err) {
            return console.error(err.toString());
        });


        const autoscroll = () => {

            const messages = document.querySelector('#messagesList');
            const lastMessageHeight = messages.lastElementChild.scrollHeight;
            window.scrollBy(0, lastMessageHeight + 50);
        }


        window.onload = function () {
            connectUsers("@Model.SenderIdentityUserId", "@Model.ReceiverIdentityUserId")
            getOldMessages();
        };

        window.onbeforeunload = function () {
            connection.invoke("Disconnect");
            disconnectUsers("@Model.SenderIdentityUserId", "@Model.ReceiverIdentityUserId")

            connection.invoke("DisconnectUserGroups", "@Model.SenderIdentityUserId","@Model.ReceiverIdentityUserId");
        }

        const sleep = (milliseconds) => {
            return new Promise(resolve => setTimeout(resolve, milliseconds))
        }

        var getOldMessages = async () => {

            while (connection.q != "Connected") {
                await sleep(1000)
            }

            connection.invoke("GetHistory", @Model.ChatId, "@Model.SenderIdentityUserId", "@Model.ReceiverIdentityUserId");
        };

        var disconnectUsers = function (sender, recipient) {
              connection.invoke("DisconnectUserGroups", sender,recipient);
        }

        var connectUsers = async (sender, recipient) => {

            while (connection.q != "Connected") {
                await sleep(1000)
            }

             connection.invoke("ConnectUserGroups", sender,recipient);
        }

    </script>
}